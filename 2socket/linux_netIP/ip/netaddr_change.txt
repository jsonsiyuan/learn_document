in_addr是一个结构体，可以用来表示一个32位的IPv4地址。
struct in_addr {
    in_addr_t s_addr;
};



1.把ip地址转化为用于网络传输的二进制数值

int inet_aton(const char *cp, struct in_addr *inp);
inet_aton() 转换网络主机地址ip(如192.168.1.10)为二进制数值，并存储在struct in_addr结构中，即第二个参数*inp,函数返回非0表示cp主机有地有效，返回0表示主机地址无效。
这个转换完后不能用于网络传输，还需要调用htons或htonl函数才能将主机字节顺序转化为网络字节顺序

in_addr_t inet_addr(const char *cp);已经转换为网络模式。
inet_addr函数转换网络主机地址（如192.168.1.10)为网络字节序二进制值，如果参数char *cp无效，函数返回-1(INADDR_NONE),
这个函数在处理地址为255.255.255.255时也返回－1,255.255.255.255是一个有效的地址，不过inet_addr无法处理;





2.将网络传输的二进制数值转化为成点分十进制的ip地址
char *inet_ntoa(struct in_addr in);
inet_ntoa 函数转换网络字节排序的地址为标准的ASCII以点分开的地址,该函数返回指向点分开的字符串地址（如192.168.1.10)的指针，该字符串的空间为静态分配的.







3.新型网路地址转化函数inet_pton和inet_ntop
这两个函数是随IPv6出现的函数，对于IPv4地址和IPv6地址都适用，函数中p和n分别代表表达（presentation)和数值（numeric)。

#include <arpe/inet.h>  
int inet_pton(int family, const char *strptr, void *addrptr);     //将点分十进制的ip地址转化为用于网络传输的数值格式  
//返回值：若成功则为1，若输入不是有效的表达式则为0，若出错则为-1  
      
const char * inet_ntop(int family, const void *addrptr, char *strptr, size_t len);     //将数值格式转化为点分十进制的ip地址格式  
//返回值：若成功则为指向结构的指针，若出错则为NULL


demo:
inet_pton(AF_INET, cp, &foo.sin_addr);  
代替代码  
foo.sin_addr.s_addr = inet_addr(cp);  
再用代码  
char str[INET_ADDRSTRLEN];  
ptr = inet_ntop(AF_INET, &foo.sin_addr, str, sizeof(str)); 
